
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Matrix inversion is usually a costly computation and there may be some benefit 
> # to caching the inverse of a matrix rather than compute it repeatedly. The
> # following two functions are used to cache the inverse of a matrix.
> 
> # make CacheMatrix creates a list containing a function to 
> # 1. set the value of the matrix
> # 2. get the value of the matrix
> # 3. set the value of inverse of the matrix
> # 4. get the value of inverse of the matrix
> makeCachematrix <- function(x = matrix()) {
+         inv <- NULL
+         set <- function(y) {
+                 x <<- y
+                 inv <<- NULL
+         }
+         get <- function() x
+         setinverse <- function(inverse) inv <<- inverse
+         getinverse <- function() inv
+         list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
+ }
> 
> 
> # The following function returns the inverse of the matrix.It first check if 
> # the inverse has already been computed. If so, it gets the result and skips the
> # computation. If not, it computes the inverse, sets the value in the cache via
> # setinverse function.
> 
> # This function assumes that the matrix is always invertible.
>  cacheSolve <- function(x, ...) {
+         inv <- x$getinverse()
+         if(!is.null(inv)) {
+                 message("getting cached data.")
+                 return(inv)
+         }
+         data <- x$get()
+         inv <- solve(data)
+         x$setinverse(inv)
+  }
>  
>  
>  ## Sample run:
>  x = rbind(c(1, 2), c(2, 1))
>  m = makeCachematrix(x)
>  m$get()
     [,1] [,2]
[1,]    1    2
[2,]    2    1
> # No cache in the first run
>  cacheSolve(m)
> cacheSolve
function(x, ...) {
        inv <- x$getinverse()
        if(!is.null(inv)) {
                message("getting cached data.")
                return(inv)
        }
        data <- x$get()
        inv <- solve(data)
        x$setinverse(inv)
 }
> x = rbind(c(1, 2), c(2, 1))
>  m = cacheSolve(x)
Error in x$getinverse : $ operator is invalid for atomic vectors
>  m$get()
     [,1] [,2]
[1,]    1    2
[2,]    2    1
> cacheSolve(m)
getting cached data.
           [,1]       [,2]
[1,] -0.3333333  0.6666667
[2,]  0.6666667 -0.3333333
> # Retrieveing from the cache in the second run
>  cacheSolve(m)
getting cached data.
           [,1]       [,2]
[1,] -0.3333333  0.6666667
[2,]  0.6666667 -0.3333333
>  getting cached data.
Error: unexpected symbol in " getting cached"
> # Retrieveing from the cache in the second run
>  cacheSolve(m)
getting cached data.
           [,1]       [,2]
[1,] -0.3333333  0.6666667
[2,]  0.6666667 -0.3333333